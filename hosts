#!/bin/bash

! [[ $(command -v nmap) ]] && echo "${prog_name}: nmap is not installed" && exit 1

###COLORS###
white="\033[1;37m"
red="\033[1;31m"
green="\033[1;32m"
cyan="\033[1;36m"
magenta="\033[1;35m"
#blue="\033[1;34m"
#yellow="\033[1;33m"
#d_red="\033[0;31m"
#d_yellow="\033[0;33m"
#d_cyan="\033[0;36m"
#d_green="\033[0;32m"
nc="\033[0m"

prog_name="hosts"
author="L. M. Abramovich"
version="0.2.2"
date="Jan 16, 2018"

macs_dir="$HOME/.config/hosts"
macs_file="${macs_dir}/.macs.hosts"
temp_file="/tmp/.macs.hosts"
nmap_file="/tmp/.nmap.hosts"

function help()
{
	echo -e "Hosts $version (an Nmap wrapper), by $author ($date)\n
Bind custom hostnames to MAC addresses\n
Unlike /etc/hosts, which allows the user to bind a custom hostname to its IP address, Hosts \
allows the user to link custom hostnames to a certain MAC address. '\$HOME/.config/hosts/.macs.hosts' \
must be filled by the user with known MAC addresses and the custom hostnames associated to them \
in the following form: 'xx:xx:xx:xx:xx:xx host_name'. With no arguments, local network hosts will be \
listed, showing the following data: custom hostname, IP address, MAC address, and MAC vendor.
Hosts will list not only known connected MAC addresses (in green), but also unknown connected MAC \
addresses (in red), and known disconnected MAC addreses (in dark green).\n
Usage: $prog_name [option]\n
  -h, --help\n\tShow this help and exit
  -p, --ports [ip_address]\n\tShow opened ports in ip_address
  -e, --edit\n\tEdit the MAC addresses file"
}

if [[ $# -gt 0 ]]; then
	case $1 in
		-h|--help|help) help && exit 0 ;;
		-p|--port)
			if [[ $# -gt 1 ]]; then 
				sudo nmap $2 | grep /
				exit 0
			else
				echo "$prog_name: IP address should be provided as second argument"
				exit 0
			fi ;;
		-e|--edit)
			read -p "Editor: " editor
			[[ $(command -v $editor) ]] && eval $editor $macs_file && exit 0 || echo "$editor: No such file or directory" && exit 1
		;;
	esac
fi

! [[ -d $macs_dir ]] && mkdir -p $macs_dir

if ! [[ -f $macs_file ]]; then
	echo -e "##MAC Addresses file for Hosts
#Ex: xx:xx:xx:xx:xx:xx hostname\n" > $macs_file
fi

cp $macs_file $temp_file
default_via=$(ip route | grep default | awk '{print $3}')
sudo nmap -sn ${default_via}/24 | grep 'MAC Address\|scan report' > $nmap_file

#Header
printf "\033[1;37m%-15s%-15s%-18s%-15s\033[0m\n" "HOSTNAME" "IP ADDRESS" "MAC ADDRESS" "VENDOR/STATE"
printf "%-15s%-15s%-18s%-15s\n" "========" "==========" "===========" "============"
#Print CONNECTED hosts, both known and unknown
while read mac; do
	hostname_ok=0
	while read line; do
		if [[ $line != "#"* ]]; then
			if [[ $(echo $line | awk '{print $1}') == $(echo $mac | awk '{print $1}') ]]; then
				printf "\033[1;32m%-15s\033[0m%-15s%s (%s)\n" "$(echo $line | awk '{print $2}')" "$(cat $nmap_file | grep -B1 $(echo $mac | awk '{print $1}') | grep "scan report" | awk '{print $NF}' | sed 's/(//g; s/)//g')" "$(echo $line | awk '{print $1}')" "$(echo $mac | awk '{print $2}')"
				hostname_ok=1
			fi
		fi
	done < $temp_file
	[[ $hostname_ok -eq 0 ]] && printf "\033[1;31m%-15s\033[0m%-15s%-15s (%s)\n" "UNKNOWN" "$(cat $nmap_file | grep -B1 $(echo $mac | awk '{print $1}') | grep "scan report" | awk '{print $NF}'| sed 's/(//g; s/)//g')" "$(echo $mac | awk '{print $1}')" "$(echo $mac | awk '{print $2}')"
done < <(cat $nmap_file | grep "MAC Address" | awk '{print $3" "$4}' | sed 's/(//g; s/)//g')

#Print DISCONNECTED KNOWN hosts
while read known_macs; do
	[[ $known_macs == "#"* || $known_macs == "" ]] && continue
	connected=0
	while read line; do
		if [[ $(echo $line | awk '{print $1}') == $(echo $known_macs | awk '{print $1}') ]]; then
			connected=1
		fi
	done < <(cat $nmap_file | grep "MAC Address" | awk '{print $3" "$4}' | sed 's/(//g; s/)//g')
	[[ $connected -eq 0 ]] && printf "\033[0;32m%-15s\033[0m%-15s%-15s %s\n" "$(echo $known_macs | awk '{print $2}')" "------------" "$(echo $known_macs | awk '{print $1}')" "[Disconnected]" 
done < $temp_file

rm $nmap_file
rm $temp_file

exit 0
